---
# Set the network name dictionary
- name: Set the network name dictionary
  ansible.builtin.set_fact:
    vm_network_dict: '{ "nat": "{{ vm_network }}" }'
  tags:
    - ontap_tools_setup

# Deploy ONTAP tools in vCenter
- name: Deploy ONTAP tools in vCenter
  community.vmware.vmware_deploy_ovf:
    hostname: '{{ inventory_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    ovf: '{{ ova_path }}'
    name: '{{ vm_name }}'
    datacenter: '{{ datacenter }}'
    cluster: '{{ cluster }}'
    datastore: '{{ datastore }}'
    networks: '{{ vm_network_dict }}'
    port: '{{ vm_port }}'
    inject_ovf_env: true
    fail_on_spec_warnings: false
    power_on: true
    wait_for_ip_address: true
    validate_certs: false
    properties:
      vplatform.vpserver.passwd: '{{ app_user_passwd }}'
      vplatform.maint.passwd: '{{ maint_user_passwd }}'
      vplatform.derby.passwd: '{{ derby_db_passwd }}'
      vplatform.vappliance.ntp.servers: '{{ ntp_server }}'
      vplatform.vcenter.register.ipAddress: '{{ inventory_hostname }}'
      vplatform.vcenter.register.port: '{{ vm_port }}'
      vplatform.vcenter.register.username: '{{ vcenter_username }}'
      vplatform.vcenter.register.passwd: '{{ vcenter_password }}'
      vplatform.hostName: '{{ ontap_tools_hostname }}'
      vplatform.ipAddress: '{{ ontap_tools_ip }}'
      vplatform.netMask: '{{ ontap_tools_netmask }}'
      vplatform.gateway: '{{ ontap_tools_gateway }}'
      vplatform.primaryDNS: '{{ dns_server }}'
      vplatform.searchDomains: '{{ dns_domain }}'
  tags:
    - ontap_tools_setup

# Induce a delay to allow for registration
- name: Wait for ONTAP tools registration to complete
  ansible.builtin.pause:
    minutes: 2
  tags:
    - ontap_tools_setup

# Build JSON for ONTAP tools Session ID
- name: Build JSON for ONTAP tools Session ID
  ansible.builtin.set_fact:
    session_id_body: { "vcenterPassword": "{{ vcenter_password }}",
                       "vcenterUserName": "{{ vcenter_username }}" }
  tags:
    - ontap_cluster_add

# Get the user login details and generate a session (vmware-api-session-id created)
# Generate Session ID for ONTAP tools with vCenter
- name: Generate a Session ID for ONTAP tools with vCenter
  ansible.builtin.uri:
    url: "https://{{ ontap_tools_ip }}:8143/api/rest/2.0/security/user/login"
    validate_certs: false
    method: POST
    return_content: true
    body_format: json
    body: "{{ session_id_body }}"
  register: login
  tags:
    - ontap_cluster_add

# Print Session ID
- ansible.builtin.debug:
    msg: "Session ID: {{ login.json.vmwareApiSessionId }}"
  tags:
    - ontap_cluster_add

# Get public certificate of ONTAP Cluster
- name: Get public certificate of ONTAP Cluster
  ansible.builtin.uri:
    url: "https://{{ ontap_tools_ip }}:8143/api/rest/3.0/security/certificates/{{ ontap_cluster }}/server-certificate?trusted-certificate=false"
    validate_certs: false
    method: GET
    return_content: true
    body_format: json
    headers:
      vmware-api-session-id: "{{ login.json.vmwareApiSessionId }}"
  register: cluster
  tags:
    - ontap_cluster_add

# Print Public Certificate of ONTAP Cluster
- ansible.builtin.debug:
    msg: "Public certificate of ONTAP Cluster: {{ cluster.json.public_certificate }}"
  tags:
    - ontap_cluster_add

# Build JSON to add ONTAP Cluster to ONTAP tools
- name: Build JSON to add ONTAP Cluster to ONTAP tools
  ansible.builtin.set_fact:
    ontap_register_body: { "host": "{{ ontap_cluster }}",
                           "password": "{{ ontap_password }}",
                           "port": 443,
                           "public_certificate": "{{ cluster.json.public_certificate }}",
                           "username": "{{ ontap_user }}" }
  tags:
    - ontap_cluster_add

# Add ONTAP Cluster to ONTAP tools
- name: Add ONTAP Cluster to ONTAP tools
  ansible.builtin.uri:
    url: "https://{{ ontap_tools_ip }}:8143/api/rest/3.0/storage/clusters"
    validate_certs: false
    method: POST
    return_content: true
    body_format: json
    body: "{{ ontap_register_body }}"
    headers:
      vmware-api-session-id: "{{ login.json.vmwareApiSessionId }}"
  tags:
    - ontap_cluster_add
